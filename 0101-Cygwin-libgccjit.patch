--- origsrc/gcc-10.3.0-RC-20210401/gcc/system.h
+++ src/gcc-10.3.0-RC-20210401/gcc/system.h
@@ -681,7 +681,7 @@
 # endif
 #endif
 
-#if defined (ENABLE_PLUGIN) && defined (HAVE_DLFCN_H)
+#if defined (HAVE_DLFCN_H)
 /* If plugin support is enabled, we could use libdl.  */
 #include <dlfcn.h>
 #endif
--- origsrc/gcc-10.3.0-RC-20210401/configure
+++ src/gcc-10.3.0-RC-20210401/configure
@@ -6490,9 +6490,13 @@ $as_echo "$as_me: WARNING: GNAT is required to build $language" >&2;}
         esac
 
         # Disable jit if -enable-host-shared not specified
-        case ${add_this_lang}:${language}:${host_shared} in
-          yes:jit:no)
-	    # PR jit/64780: explicitly specify --enable-host-shared
+        # but not if building for Mingw/Cygwin
+        case $target in
+          *mingw*|*-*-cygwin*) ;;
+          *)
+          case ${add_this_lang}:${language}:${host_shared} in
+            yes:jit:no)
+	           # PR jit/64780: explicitly specify --enable-host-shared
 	    as_fn_error $? "
 Enabling language \"jit\" requires --enable-host-shared.
 
@@ -6503,17 +6507,19 @@ If you want to build both the jit and the regular compiler, it is often
 best to do this via two separate configure/builds, in separate
 directories, to avoid imposing the performance cost of
 --enable-host-shared on the regular compiler." "$LINENO" 5
-	    ;;
-          all:jit:no)
-	    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: --enable-host-shared required to build $language" >&5
+	            ;;
+            all:jit:no)
+	      { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: --enable-host-shared required to build $language" >&5
 $as_echo "$as_me: WARNING: --enable-host-shared required to build $language" >&2;}
-            add_this_lang=unsupported
-            ;;
-          *:jit:no)
-            # Silently disable.
-            add_this_lang=unsupported
-            ;;
-	esac
+              add_this_lang=unsupported
+              ;;
+            *:jit:no)
+              # Silently disable.
+              add_this_lang=unsupported
+              ;;
+	        esac
+          ;;
+        esac
 
         # Disable a language that is unsupported by the target.
 	case "${add_this_lang}: $unsupported_languages " in

--- origsrc/gcc-10.3.0-RC-20210401/configure.ac
+++ src/gcc-10.3.0-RC-20210401/configure.ac
@@ -2080,9 +2080,15 @@ if test -d ${srcdir}/gcc; then
         esac
 
         # Disable jit if -enable-host-shared not specified
-        case ${add_this_lang}:${language}:${host_shared} in
-          yes:jit:no)
-	    # PR jit/64780: explicitly specify --enable-host-shared
+        # but not if building for Mingw/Cygwin. All code in Windows
+        # is position independent code (PIC).
+        case $target in
+          *mingw*) ;;
+          *cygwin*) ;;
+          *)
+          case ${add_this_lang}:${language}:${host_shared} in
+            yes:jit:no)
+	           # PR jit/64780: explicitly specify --enable-host-shared
 	    AC_MSG_ERROR([
 Enabling language "jit" requires --enable-host-shared.
 
@@ -2093,16 +2098,18 @@ If you want to build both the jit and the regular compiler, it is often
 best to do this via two separate configure/builds, in separate
 directories, to avoid imposing the performance cost of
 --enable-host-shared on the regular compiler.])
-	    ;;
-          all:jit:no)
-	    AC_MSG_WARN([--enable-host-shared required to build $language])
-            add_this_lang=unsupported
-            ;;
-          *:jit:no)
-            # Silently disable.
-            add_this_lang=unsupported
-            ;;
-	esac
+	            ;;
+            all:jit:no)
+	      AC_MSG_WARN([--enable-host-shared required to build $language])
+              add_this_lang=unsupported
+              ;;
+            *:jit:no)
+              # Silently disable.
+              add_this_lang=unsupported
+              ;;
+	        esac
+          ;;
+        esac
 
         # Disable a language that is unsupported by the target.
 	case "${add_this_lang}: $unsupported_languages " in

--- origsrc/gcc-10.3.0-RC-20210401/gcc/Makefile.in
+++ src/gcc-10.3.0-RC-20210401/gcc/Makefile.in
@@ -1721,7 +1721,7 @@
 # This symlink makes the full installation name of the driver be available
 # from within the *build* directory, for use when running the JIT library
 # from there (e.g. when running its testsuite).
-$(FULL_DRIVER_NAME): ./xgcc
+$(FULL_DRIVER_NAME): ./xgcc$(exeext)
 	rm -f $@
 	$(LN_S) $< $@
 

--- origsrc/gcc-10.3.0-RC-20210401/gcc/c/Make-lang.in
+++ src/gcc-10.3.0-RC-20210401/gcc/c/Make-lang.in
@@ -162,7 +162,7 @@ c.install-plugin: installdirs
 # Install import library.
 ifeq ($(plugin_implib),yes)
 	$(mkinstalldirs) $(DESTDIR)$(plugin_resourcesdir)
-	$(INSTALL_DATA) cc1$(exeext).a $(DESTDIR)/$(plugin_resourcesdir)/cc1$(exeext).a
+	$(INSTALL_DATA) cc1$(exeext).a $(DESTDIR)$(plugin_resourcesdir)/cc1$(exeext).a
 endif
 
 c.uninstall:

--- origsrc/gcc-10.3.0-RC-20210401/gcc/cp/Make-lang.in
+++ src/gcc-10.3.0-RC-20210401/gcc/cp/Make-lang.in
@@ -267,7 +267,7 @@
 # Install import library.
 ifeq ($(plugin_implib),yes)
 	$(mkinstalldirs) $(DESTDIR)$(plugin_resourcesdir)
-	$(INSTALL_DATA) cc1plus$(exeext).a $(DESTDIR)/$(plugin_resourcesdir)/cc1plus$(exeext).a
+	$(INSTALL_DATA) cc1plus$(exeext).a $(DESTDIR)$(plugin_resourcesdir)/cc1plus$(exeext).a
 endif
 
 c++.uninstall:

--- origsrc/gcc-10.3.0-RC-20210401/gcc/jit/Make-lang.in
+++ src/gcc-10.3.0-RC-20210401/gcc/jit/Make-lang.in
@@ -40,14 +40,29 @@
 # into the jit rule, but that needs a little bit of work
 # to do the right thing within all.cross.
 
-LIBGCCJIT_LINKER_NAME = libgccjit.so
 LIBGCCJIT_VERSION_NUM = 0
 LIBGCCJIT_MINOR_NUM = 0
 LIBGCCJIT_RELEASE_NUM = 1
+
+SHARED_PFX=lib
+ifneq (,$(filter %cygwin,$(target)))
+SHARED_PFX=cyg
+endif
+
+ifneq (,$(filter %-mingw% %-cygwin,$(target)))
+LIBGCCJIT_FILENAME = $(SHARED_PFX)gccjit-$(LIBGCCJIT_VERSION_NUM).dll
+LIBGCCJIT_IMPORT_LIB = libgccjit.dll.a
+
+jit: $(LIBGCCJIT_FILENAME) \
+	$(FULL_DRIVER_NAME)
+
+else
+
+LIBGCCJIT_LINKER_NAME = libgccjit.so
+
 LIBGCCJIT_SONAME = $(LIBGCCJIT_LINKER_NAME).$(LIBGCCJIT_VERSION_NUM)
 LIBGCCJIT_FILENAME = \
   $(LIBGCCJIT_SONAME).$(LIBGCCJIT_MINOR_NUM).$(LIBGCCJIT_RELEASE_NUM)
-
 LIBGCCJIT_LINKER_NAME_SYMLINK = $(LIBGCCJIT_LINKER_NAME)
 LIBGCCJIT_SONAME_SYMLINK = $(LIBGCCJIT_SONAME)
 
@@ -68,6 +83,7 @@
 	$(LIBGCCJIT_SYMLINK) \
 	$(LIBGCCJIT_LINKER_NAME_SYMLINK) \
 	$(FULL_DRIVER_NAME)
+endif
 
 # Tell GNU make to ignore these if they exist.
 .PHONY: jit
@@ -87,6 +103,14 @@
 # Use strict warnings for this front end.
 jit-warn = $(STRICT_WARN)
 
+ifneq (,$(filter %-mingw% %-cygwin,$(target)))
+# Create import library
+LIBGCCJIT_EXTRA_OPTS = -Wl,--out-implib,$(LIBGCCJIT_IMPORT_LIB)
+else
+LIBGCCJIT_EXTRA_OPTS = $(LIBGCCJIT_VERSION_SCRIPT_OPTION) \
+	$(LIBGCCJIT_SONAME_OPTION)
+endif
+
 # We avoid using $(BACKEND) from Makefile.in in order to avoid pulling
 # in main.o
 $(LIBGCCJIT_FILENAME): $(jit_OBJS) \
@@ -98,14 +122,16 @@
 	     $(jit_OBJS) libbackend.a libcommon-target.a libcommon.a \
 	     $(CPPLIB) $(LIBDECNUMBER) $(EXTRA_GCC_LIBS) $(LIBS) $(BACKENDLIBS) \
 	     $(EXTRA_GCC_OBJS) \
-	     $(LIBGCCJIT_VERSION_SCRIPT_OPTION) \
-	     $(LIBGCCJIT_SONAME_OPTION)
+	     $(LIBGCCJIT_EXTRA_OPTS)
 
+# Create symlinks when not building for Windows
+ifeq (,$(filter %-mingw% %-cygwin,$(target)))
 $(LIBGCCJIT_SONAME_SYMLINK): $(LIBGCCJIT_FILENAME)
 	ln -sf $(LIBGCCJIT_FILENAME) $(LIBGCCJIT_SONAME_SYMLINK)
 
 $(LIBGCCJIT_LINKER_NAME_SYMLINK): $(LIBGCCJIT_SONAME_SYMLINK)
 	ln -sf $(LIBGCCJIT_SONAME_SYMLINK) $(LIBGCCJIT_LINKER_NAME_SYMLINK)
+endif
 
 #
 # Build hooks:
@@ -275,19 +301,31 @@
 
 #
 # Install hooks:
-jit.install-common: installdirs
+jit.install-headers:
+	$(INSTALL_DATA) $(srcdir)/jit/libgccjit.h \
+	  $(DESTDIR)$(includedir)/libgccjit.h
+	$(INSTALL_DATA) $(srcdir)/jit/libgccjit++.h \
+	  $(DESTDIR)$(includedir)/libgccjit++.h
+
+ifneq (,$(filter %-mingw% %-cygwin,$(target)))
+jit.install-common: installdirs jit.install-headers
+# Install import library
+	$(INSTALL_PROGRAM) $(LIBGCCJIT_IMPORT_LIB) \
+	  $(DESTDIR)$(libdir)/$(LIBGCCJIT_IMPORT_LIB)
+# Install DLL file
+	$(INSTALL_PROGRAM) $(LIBGCCJIT_FILENAME) \
+	  $(DESTDIR)$(bindir)/$(LIBGCCJIT_FILENAME)
+else
+jit.install-common: installdirs jit.install-headers
 	$(INSTALL_PROGRAM) $(LIBGCCJIT_FILENAME) \
-	  $(DESTDIR)/$(libdir)/$(LIBGCCJIT_FILENAME)
+	  $(DESTDIR)$(libdir)/$(LIBGCCJIT_FILENAME)
 	ln -sf \
 	  $(LIBGCCJIT_FILENAME) \
-	  $(DESTDIR)/$(libdir)/$(LIBGCCJIT_SONAME_SYMLINK)
+	  $(DESTDIR)$(libdir)/$(LIBGCCJIT_SONAME_SYMLINK)
 	ln -sf \
 	  $(LIBGCCJIT_SONAME_SYMLINK)\
-	  $(DESTDIR)/$(libdir)/$(LIBGCCJIT_LINKER_NAME_SYMLINK)
-	$(INSTALL_DATA) $(srcdir)/jit/libgccjit.h \
-	  $(DESTDIR)/$(includedir)/libgccjit.h
-	$(INSTALL_DATA) $(srcdir)/jit/libgccjit++.h \
-	  $(DESTDIR)/$(includedir)/libgccjit++.h
+	  $(DESTDIR)$(libdir)/$(LIBGCCJIT_LINKER_NAME_SYMLINK)
+endif
 
 jit.install-man:
 

--- origsrc/gcc-10.3.0-RC-20210401/gcc/testsuite/jit.dg/jit.exp
+++ src/gcc-10.3.0-RC-20210401/gcc/testsuite/jit.dg/jit.exp
@@ -413,7 +413,7 @@
     # This also ensures that the source name makes it into the
     # pass/fail output, so that we can distinguish e.g. which test-foo
     # is failing.
-    set output_file "[file tail $prog].exe"
+    set output_file "[file tail $prog].xcx"
     verbose "output_file: $output_file"
 
     # Create the test executable:
@@ -554,7 +554,7 @@
 	# Verify that a reproducer was generated
 	if { [file exists $generated_reproducer] == 1} {
 	    pass "found generated reproducer: $generated_reproducer"
-	    set output_file "${generated_reproducer}.exe"
+	    set output_file "${generated_reproducer}.xcx"
 	    # (this overwrites output_file)
 
 	    # Try to compile the generated reproducer
@@ -728,7 +728,7 @@
 
     # Name the built executable as OUTPUT_FILENAME with
     # ".exe" appended.
-    set executable_from_asm ${asm_filename}.exe
+    set executable_from_asm ${asm_filename}.xsx
     verbose "  executable_from_asm: ${executable_from_asm}"
 
     # Invoke the driver to assemble/link the .s file to the .exe
@@ -776,7 +776,7 @@
 
     # Name the linked executable as OUTPUT_FILENAME with
     # ".exe" appended.
-    set executable_from_obj ${obj_filename}.exe
+    set executable_from_obj ${obj_filename}.xox
     verbose "  executable_from_obj: ${executable_from_obj}"
 
     # Invoke the driver to link the .o file to the .exe
@@ -828,7 +828,7 @@
     # Build a test executable from
     # verify-dynamic-library.c
     set test_src "verify-dynamic-library.c"
-    set test_executable ${test_src}.exe
+    set test_executable ${test_src}.xdx
     verbose "  test_executable: ${test_executable}"
 
     # Invoke the driver to build the test executable
@@ -880,7 +880,7 @@
 
 # We need to link with --export-dynamic for test-calling-external-function.c
 # so that the JIT-built code can call into functions from the main program.
-set DEFAULT_CFLAGS "-I$srcdir/../jit -lgccjit -g -Wall -Werror -Wl,--export-dynamic"
+set DEFAULT_CFLAGS "-I$srcdir/../jit -lgccjit -g -Wall -Werror"
 
 # Main loop.  This will invoke jig-dg-test on each test-*.c file.
 dg-runtest $tests "" $DEFAULT_CFLAGS

--- origsrc/gcc-10.3.0-RC-20210401/gcc/testsuite/jit.dg/test-compile-to-assembler.c
+++ src/gcc-10.3.0-RC-20210401/gcc/testsuite/jit.dg/test-compile-to-assembler.c
@@ -10,4 +10,4 @@
 #include "create-code-for-hello-world-executable.h"
 
 /* { dg-final { jit-verify-output-file-was-created "" } } */
-/* { dg-final { jit-verify-assembler "hello from ./output-of-test-compile-to-assembler.c.s.exe" } } */
+/* { dg-final { jit-verify-assembler "hello from ./output-of-test-compile-to-assembler.c.s.xsx" } } */

--- origsrc/gcc-10.3.0-RC-20210401/gcc/testsuite/jit.dg/test-compile-to-dynamic-library.c
+++ src/gcc-10.3.0-RC-20210401/gcc/testsuite/jit.dg/test-compile-to-dynamic-library.c
@@ -63,4 +63,4 @@
 }
 
 /* { dg-final { jit-verify-output-file-was-created "" } } */
-/* { dg-final { jit-verify-dynamic-library "hello from ./verify-dynamic-library.c.exe" } } */
+/* { dg-final { jit-verify-dynamic-library "hello from ./verify-dynamic-library.c.xdx" } } */

--- origsrc/gcc-10.3.0-RC-20210401/gcc/testsuite/jit.dg/test-compile-to-executable.c
+++ src/gcc-10.3.0-RC-20210401/gcc/testsuite/jit.dg/test-compile-to-executable.c
@@ -5,9 +5,9 @@
 
 #define TEST_COMPILING_TO_FILE
 #define OUTPUT_KIND      GCC_JIT_OUTPUT_KIND_EXECUTABLE
-#define OUTPUT_FILENAME  "output-of-test-compile-to-executable.c.exe"
+#define OUTPUT_FILENAME  "output-of-test-compile-to-executable.c.xcx.exe"
 #include "harness.h"
 #include "create-code-for-hello-world-executable.h"
 
 /* { dg-final { jit-verify-output-file-was-created "" } } */
-/* { dg-final { jit-verify-executable "hello from ./output-of-test-compile-to-executable.c.exe" } } */
+/* { dg-final { jit-verify-executable "hello from ./output-of-test-compile-to-executable.c.xcx" } } */

--- origsrc/gcc-10.3.0-RC-20210401/gcc/testsuite/jit.dg/test-compile-to-object.c
+++ src/gcc-10.3.0-RC-20210401/gcc/testsuite/jit.dg/test-compile-to-object.c
@@ -10,4 +10,4 @@
 #include "create-code-for-hello-world-executable.h"
 
 /* { dg-final { jit-verify-output-file-was-created "" } } */
-/* { dg-final { jit-verify-object "hello from ./output-of-test-compile-to-object.c.o.exe" } } */
+/* { dg-final { jit-verify-object "hello from ./output-of-test-compile-to-object.c.o.xox" } } */
